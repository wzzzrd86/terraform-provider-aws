// Code generated by tools/tfsdk2fw/main.go. Manual editing is required.

package rds

import (
	"context"
	"regexp"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/resourcevalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/framework"
	fwboolplanmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/boolplanmodifier"

	fwint64planmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/int64planmodifier"
	fwstringplanmodifier "github.com/hashicorp/terraform-provider-aws/internal/framework/stringplanmodifier"
)

func init() {
	_sp.registerFrameworkResourceFactory(newResourceCluster)
}

// newResourceCluster instantiates a new Resource for the aws_rds_cluster resource.
func newResourceCluster(context.Context) (resource.ResourceWithConfigure, error) {
	r := &resourceCluster{}
	r.SetMigratedFromPluginSDK(true)
	r.SetDefaultCreateTimeout(7200000000000 * time.Nanosecond) // TODO Convert to more human-friendly duration.
	r.SetDefaultUpdateTimeout(7200000000000 * time.Nanosecond) // TODO Convert to more human-friendly duration.
	r.SetDefaultDeleteTimeout(7200000000000 * time.Nanosecond) // TODO Convert to more human-friendly duration.

	return r, nil
}

type resourceCluster struct {
	framework.ResourceWithConfigure
	framework.WithTimeouts
}

// Metadata should return the full name of the resource, such as
// examplecloud_thing.
func (r *resourceCluster) Metadata(_ context.Context, request resource.MetadataRequest, response *resource.MetadataResponse) {
	response.TypeName = "aws_rds_cluster"
}

// Schema returns the schema for this resource.
func (r *resourceCluster) Schema(ctx context.Context, request resource.SchemaRequest, response *resource.SchemaResponse) {
	s := schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allocated_storage": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"allow_major_version_upgrade": schema.BoolAttribute{
				Optional: true,
			},
			"apply_immediately": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"arn": schema.StringAttribute{
				Computed: true,
			},
			"availability_zones": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.RequiresReplace(),
				},
			},
			"backtrack_window": schema.Int64Attribute{
				Optional: true,
				Validators: []validator.Int64{
					int64validator.Between(0, 259200),
				},
			},
			"backup_retention_period": schema.Int64Attribute{
				Optional: true,
				PlanModifiers: []planmodifier.Int64{
					fwint64planmodifier.DefaultValue(1),
				},
				Validators: []validator.Int64{
					int64validator.AtMost(35),
				},
			},
			"cluster_identifier": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^[0-9a-z-]+$`), "only lowercase alphanumeric characters and hyphens allowed"),
					stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z]`), "first character must be a letter"),
					// TODO finish validators
				},
			},
			"cluster_identifier_prefix": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				// TODO Validate,
			},
			"cluster_members": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"cluster_resource_id": schema.StringAttribute{
				Computed: true,
			},
			"copy_tags_to_snapshot": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					fwboolplanmodifier.DefaultValue(false),
				},
			},
			"database_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"db_cluster_instance_class": schema.StringAttribute{
				Optional: true,
			},
			"db_cluster_parameter_group_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"db_instance_parameter_group_name": schema.StringAttribute{
				Optional: true,
			},
			"db_subnet_group_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"deletion_protection": schema.BoolAttribute{
				Optional: true,
			},
			"enable_global_write_forwarding": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					fwboolplanmodifier.DefaultValue(false),
				},
			},
			"enable_http_endpoint": schema.BoolAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					fwboolplanmodifier.DefaultValue(false),
				},
			},
			"enabled_cloudwatch_logs_exports": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Validators: []validator.Set{
					setvalidator.ValueStringsAre(stringvalidator.OneOf(ClusterExportableLogType_Values()...)),
				},
			},
			"endpoint": schema.StringAttribute{
				Computed: true,
			},
			"engine": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					fwstringplanmodifier.DefaultValue(ClusterEngineAurora),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(ClusterEngine_Values()...),
				},
			},
			"engine_mode": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					fwstringplanmodifier.DefaultValue(EngineModeProvisioned),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(EngineMode_Values()...),
				},
			},
			"engine_version": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"engine_version_actual": schema.StringAttribute{
				Computed: true,
			},
			"final_snapshot_identifier": schema.StringAttribute{
				Optional: true,
				// TODO Validate,
			},
			"global_cluster_identifier": schema.StringAttribute{
				Optional: true,
			},
			"hosted_zone_id": schema.StringAttribute{
				Computed: true,
			},
			"iam_database_authentication_enabled": schema.BoolAttribute{
				Optional: true,
			},
			"iam_roles": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"id": framework.IDAttribute(),
			"iops": schema.Int64Attribute{
				Optional: true,
			},
			"kms_key_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					// TODO validate ARN
				},
			},
			"master_password": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"master_username": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"network_type": schema.StringAttribute{
				Optional: true,
				Computed: true,
				// TODO Validate,
			},
			"port": schema.Int64Attribute{
				Optional: true,
				Computed: true,
			},
			"preferred_backup_window": schema.StringAttribute{
				Optional: true,
				Computed: true,
				// TODO Validate,
			},
			"preferred_maintenance_window": schema.StringAttribute{
				Optional: true,
				Computed: true,
				// TODO Validate,
			},
			"reader_endpoint": schema.StringAttribute{
				Computed: true,
			},
			"replication_source_identifier": schema.StringAttribute{
				Optional: true,
			},
			"skip_final_snapshot": schema.BoolAttribute{
				Optional: true,
				// TODO Default:false,
			},
			"snapshot_identifier": schema.StringAttribute{
				Optional: true,
			},
			"source_region": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"storage_encrypted": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
			},
			"storage_type": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tags": // TODO tftags.TagsAttribute()
			schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
			},
			"tags_all": // TODO tftags.TagsAttributeComputedOnly()
			schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"vpc_security_group_ids": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
		},
		Blocks: map[string]schema.Block{
			"restore_to_point_in_time": schema.ListNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"restore_to_time": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							// TODO Validate,
						},
						"restore_type": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							// TODO Validate,
						},
						"source_cluster_identifier": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
							// TODO Validate,
						},
						"use_latest_restorable_time": schema.BoolAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplace(),
							},
						},
					},
				},
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
			},
			"s3_import": schema.ListNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"bucket_name": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
						"bucket_prefix": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
						"ingestion_role": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
						"source_engine": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
						"source_engine_version": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplace(),
							},
						},
					},
				},
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
			},
			"scaling_configuration": schema.ListNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"auto_pause": schema.BoolAttribute{
							Optional: true,
							// TODO Default:true,
						},
						"max_capacity": schema.Int64Attribute{
							Optional: true,
							// TODO Default:16,
						},
						"min_capacity": schema.Int64Attribute{
							Optional: true,
							// TODO Default:1,
						},
						"seconds_until_auto_pause": schema.Int64Attribute{
							Optional: true,
							// TODO Default:300,
							// TODO Validate,
						},
						"timeout_action": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								fwstringplanmodifier.DefaultValue("RollbackCapacityChange"),
							},
							// TODO Validate,
						},
					},
				},
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
			},
			"serverlessv2_scaling_configuration": schema.ListNestedBlock{
				NestedObject: schema.NestedBlockObject{
					Attributes: map[string]schema.Attribute{
						"max_capacity": schema.Float64Attribute{
							Required: true,
							// TODO Validate,
						},
						"min_capacity": schema.Float64Attribute{
							Required: true,
							// TODO Validate,
						},
					},
				},
				Validators: []validator.List{
					listvalidator.SizeAtMost(1),
				},
			},
		},
	}

	if s.Blocks == nil {
		s.Blocks = make(map[string]schema.Block)
	}
	s.Blocks["timeouts"] = timeouts.Block(ctx, timeouts.Opts{
		Create: true,
		Update: true,
		Delete: true,
	})

	response.Schema = s
}

// Create is called when the provider must create a new resource.
// Config and planned state values should be read from the CreateRequest and new state values set on the CreateResponse.
func (r *resourceCluster) Create(ctx context.Context, request resource.CreateRequest, response *resource.CreateResponse) {
	var data resourceClusterData

	response.Diagnostics.Append(request.Plan.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}
	createTimeout := r.CreateTimeout(ctx, data.Timeouts)

	data.ID = types.StringValue("TODO")

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}

// Read is called when the provider must read resource values in order to update state.
// Planned state values should be read from the ReadRequest and new state values set on the ReadResponse.
func (r *resourceCluster) Read(ctx context.Context, request resource.ReadRequest, response *resource.ReadResponse) {
	var data resourceClusterData

	response.Diagnostics.Append(request.State.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(response.State.Set(ctx, &data)...)
}

// Update is called to update the state of the resource.
// Config, planned state, and prior state values should be read from the UpdateRequest and new state values set on the UpdateResponse.
func (r *resourceCluster) Update(ctx context.Context, request resource.UpdateRequest, response *resource.UpdateResponse) {
	var old, new resourceClusterData

	response.Diagnostics.Append(request.State.Get(ctx, &old)...)

	if response.Diagnostics.HasError() {
		return
	}

	response.Diagnostics.Append(request.Plan.Get(ctx, &new)...)

	if response.Diagnostics.HasError() {
		return
	}
	updateTimeout := r.UpdateTimeout(ctx, new.Timeouts)

	response.Diagnostics.Append(response.State.Set(ctx, &new)...)
}

// Delete is called when the provider must delete the resource.
// Config values may be read from the DeleteRequest.
//
// If execution completes without error, the framework will automatically call DeleteResponse.State.RemoveResource(),
// so it can be omitted from provider logic.
func (r *resourceCluster) Delete(ctx context.Context, request resource.DeleteRequest, response *resource.DeleteResponse) {
	var data resourceClusterData

	response.Diagnostics.Append(request.State.Get(ctx, &data)...)

	if response.Diagnostics.HasError() {
		return
	}
	deleteTimeout := r.DeleteTimeout(ctx, data.Timeouts)

	tflog.Debug(ctx, "deleting TODO", map[string]interface{}{
		"id": data.ID.ValueString(),
	})
}

// ImportState is called when the provider must import the state of a resource instance.
// This method must return enough state so the Read method can properly refresh the full resource.
//
// If setting an attribute with the import identifier, it is recommended to use the ImportStatePassthroughID() call in this method.
func (r *resourceCluster) ImportState(ctx context.Context, request resource.ImportStateRequest, response *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), request, response)
}

// ModifyPlan is called when the provider has an opportunity to modify
// the plan: once during the plan phase when Terraform is determining
// the diff that should be shown to the user for approval, and once
// during the apply phase with any unknown values from configuration
// filled in with their final values.
//
// The planned new state is represented by
// ModifyPlanResponse.Plan. It must meet the following
// constraints:
// 1. Any non-Computed attribute set in config must preserve the exact
// config value or return the corresponding attribute value from the
// prior state (ModifyPlanRequest.State).
// 2. Any attribute with a known value must not have its value changed
// in subsequent calls to ModifyPlan or Create/Read/Update.
// 3. Any attribute with an unknown value may either remain unknown
// or take on any value of the expected type.
//
// Any errors will prevent further resource-level plan modifications.
func (r *resourceCluster) ModifyPlan(ctx context.Context, request resource.ModifyPlanRequest, response *resource.ModifyPlanResponse) {
	r.SetTagsAll(ctx, request, response)
}

func (r *resourceCluster) ConfigValidators(ctx context.Context) []resource.ConfigValidator {
	return []resource.ConfigValidator{
		resourcevalidator.Conflicting(
			path.MatchRoot("cluster_identifier"),
			path.MatchRoot("cluster_identifier_prefix"),
		),
	}
}

type resourceClusterData struct {
	AllocatedStorage                 types.Int64  `tfsdk:"allocated_storage"`
	AllowMajorVersionUpgrade         types.Bool   `tfsdk:"allow_major_version_upgrade"`
	ApplyImmediately                 types.Bool   `tfsdk:"apply_immediately"`
	ARN                              types.String `tfsdk:"arn"`
	AvailabilityZones                types.Set    `tfsdk:"availability_zones"`
	BacktrackWindow                  types.Int64  `tfsdk:"backtrack_window"`
	BackupRetentionPeriod            types.Int64  `tfsdk:"backup_retention_period"`
	ClusterIdentifier                types.String `tfsdk:"cluster_identifier"`
	ClusterIdentifierPrefix          types.String `tfsdk:"cluster_identifier_prefix"`
	ClusterMembers                   types.Set    `tfsdk:"cluster_members"`
	ClusterResourceID                types.String `tfsdk:"cluster_resource_id"`
	CopyTagsToSnapshot               types.Bool   `tfsdk:"copy_tags_to_snapshot"`
	DatabaseName                     types.String `tfsdk:"database_name"`
	DbClusterInstanceClass           types.String `tfsdk:"db_cluster_instance_class"`
	DbClusterParameterGroupName      types.String `tfsdk:"db_cluster_parameter_group_name"`
	DbInstanceParameterGroupName     types.String `tfsdk:"db_instance_parameter_group_name"`
	DbSubnetGroupName                types.String `tfsdk:"db_subnet_group_name"`
	DeletionProtection               types.Bool   `tfsdk:"deletion_protection"`
	EnableGlobalWriteForwarding      types.Bool   `tfsdk:"enable_global_write_forwarding"`
	EnableHttpEndpoint               types.Bool   `tfsdk:"enable_http_endpoint"`
	EnabledCloudwatchLogsExports     types.Set    `tfsdk:"enabled_cloudwatch_logs_exports"`
	Endpoint                         types.String `tfsdk:"endpoint"`
	Engine                           types.String `tfsdk:"engine"`
	EngineMode                       types.String `tfsdk:"engine_mode"`
	EngineVersion                    types.String `tfsdk:"engine_version"`
	EngineVersionActual              types.String `tfsdk:"engine_version_actual"`
	FinalSnapshotIdentifier          types.String `tfsdk:"final_snapshot_identifier"`
	GlobalClusterIdentifier          types.String `tfsdk:"global_cluster_identifier"`
	HostedZoneID                     types.String `tfsdk:"hosted_zone_id"`
	IamDatabaseAuthenticationEnabled types.Bool   `tfsdk:"iam_database_authentication_enabled"`
	IamRoles                         types.Set    `tfsdk:"iam_roles"`
	ID                               types.String `tfsdk:"id"`
	Iops                             types.Int64  `tfsdk:"iops"`
	KmsKeyID                         types.String `tfsdk:"kms_key_id"`
	MasterPassword                   types.String `tfsdk:"master_password"`
	MasterUsername                   types.String `tfsdk:"master_username"`
	NetworkType                      types.String `tfsdk:"network_type"`
	Port                             types.Int64  `tfsdk:"port"`
	PreferredBackupWindow            types.String `tfsdk:"preferred_backup_window"`
	PreferredMaintenanceWindow       types.String `tfsdk:"preferred_maintenance_window"`
	ReaderEndpoint                   types.String `tfsdk:"reader_endpoint"`
	ReplicationSourceIdentifier      types.String `tfsdk:"replication_source_identifier"`
	SkipFinalSnapshot                types.Bool   `tfsdk:"skip_final_snapshot"`
	SnapshotIdentifier               types.String `tfsdk:"snapshot_identifier"`
	SourceRegion                     types.String `tfsdk:"source_region"`
	StorageEncrypted                 types.Bool   `tfsdk:"storage_encrypted"`
	StorageType                      types.String `tfsdk:"storage_type"`
	Tags                             types.Map    `tfsdk:"tags"`
	TagsAll                          types.Map    `tfsdk:"tags_all"`
	VpcSecurityGroupIds              types.Set    `tfsdk:"vpc_security_group_ids"`

	Timeouts timeouts.Value `tfsdk:"timeouts"`
}
